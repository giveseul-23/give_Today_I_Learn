-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.

-- MEMBER Table Create SQL
CREATE TABLE MEMBER
(
    ID             VARCHAR2(20)     NOT NULL, 
    PASSWORD       VARCHAR2(50)     NOT NULL, 
    NAME           VARCHAR2(20)     NOT NULL, 
    YEAR           VARCHAR2(4)      NOT NULL, 
    MONTH          VARCHAR2(4)      NOT NULL, 
    DAY            VARCHAR2(4)      NOT NULL, 
    PHONNUM        VARCHAR2(20)     NOT NULL, 
    LOCATION       VARCHAR2(20)     NOT NULL, 
    EMAIL          VARCHAR2(60)     NOT NULL, 
    JOINDATE       VARCHAR2(20)     NULL, 
    PROFILE_IMG    VARCHAR2(200)    NULL, 
    CONSTRAINT MEMBER_PK PRIMARY KEY (ID)
)
/

COMMENT ON COLUMN MEMBER.ID IS '아이디'
/

COMMENT ON COLUMN MEMBER.PASSWORD IS '비밀번호'
/

COMMENT ON COLUMN MEMBER.NAME IS '이름'
/

COMMENT ON COLUMN MEMBER.YEAR IS '생일 년'
/

COMMENT ON COLUMN MEMBER.MONTH IS '생일 월'
/

COMMENT ON COLUMN MEMBER.DAY IS '생일 일'
/

COMMENT ON COLUMN MEMBER.PHONNUM IS '핸드폰번호'
/

COMMENT ON COLUMN MEMBER.LOCATION IS '지역'
/

COMMENT ON COLUMN MEMBER.EMAIL IS '이메일'
/

COMMENT ON COLUMN MEMBER.JOINDATE IS '가입일자'
/

COMMENT ON COLUMN MEMBER.PROFILE_IMG IS '프로필사진명'
/


-- MEMBER Table Create SQL
CREATE TABLE BOARD
(
    B_NO             NUMBER(7, 0)     NOT NULL, 
    WRITER_ID        VARCHAR2(20)     NOT NULL, 
    B_CATEGORY       VARCHAR2(20)     NOT NULL, 
    B_TITLE          VARCHAR2(20)     NOT NULL, 
    B_CONTENTS       VARCHAR2(500)    NOT NULL, 
    B_PASSWORD       VARCHAR2(20)     NOT NULL, 
    B_STATUS         VARCHAR2(20)     NOT NULL, 
    B_REGDATE        VARCHAR2(20)     NULL, 
    B_ANSWER         VARCHAR2(200)    NULL, 
    ANSWER_DATE      VARCHAR2(20)     NULL, 
    ADMIN_ID         VARCHAR2(20)     NULL, 
    FILE_IMG_NAME    VARCHAR2(20)     NULL, 
    ORI_IMG_NAME     VARCHAR2(20)     NULL, 
    HIT              NUMBER(5, 0)     NOT NULL, 
    CONSTRAINT BOARD_PK PRIMARY KEY (B_NO)
)
/

--B_NO 시퀀스 생성
CREATE SEQUENCE  B_SEQUENCE
   MINVALUE 1 MAXVALUE 99999999999999999999999
   INCREMENT BY 1
   START WITH 5001
   CACHE 20 NOORDER  NOCYCLE ;

COMMENT ON COLUMN BOARD.B_NO IS '게시판 번호'
/

COMMENT ON COLUMN BOARD.WRITER_ID IS '작성자아이디'
/

COMMENT ON COLUMN BOARD.B_CATEGORY IS '게시글 종류'
/

COMMENT ON COLUMN BOARD.B_TITLE IS '게시판 제목'
/

COMMENT ON COLUMN BOARD.B_CONTENTS IS '게시판 내용'
/

COMMENT ON COLUMN BOARD.B_PASSWORD IS '비밀번호'
/

COMMENT ON COLUMN BOARD.B_STATUS IS '답변등록상태'
/

COMMENT ON COLUMN BOARD.B_REGDATE IS '등록날짜'
/

COMMENT ON COLUMN BOARD.B_ANSWER IS '관리자답변'
/

COMMENT ON COLUMN BOARD.ANSWER DATE IS '답변날짜'
/

COMMENT ON COLUMN BOARD.ADMIN_ID IS '관리자아이디'
/

COMMENT ON COLUMN BOARD.FILE_IMG_NAME IS '파일명'
/

COMMENT ON COLUMN BOARD.ORI_IMG_NAME IS '실제파일명'
/

COMMENT ON COLUMN BOARD.HIT IS '조회수'
/


-- MEMBER Table Create SQL
CREATE TABLE P_LIST
(
    P_NO            NUMBER(7,0)       NOT NULL, 
    SALE_ID         VARCHAR2(20)      NULL, 
    PURCHASE_ID     VARCHAR2(20)      NULL, 
    PICTURE01       VARCHAR2(100)     NOT NULL, 
    PRICE           VARCHAR2(20)      NOT NULL, 
    P_TITLE         VARCHAR2(100)     NOT NULL, 
    P_CONTENTS      VARCHAR2(1000)    NULL, 
    P_STATUS        VARCHAR2(20)      NOT NULL, 
    P_CATEGORY      VARCHAR2(20)      NOT NULL, 
    P_REGDATE       VARCHAR2(20)      NULL, 
    LOCATION        VARCHAR2(20)      NOT NULL, 
    SELLING_DATE    VARCHAR2(20)      NULL, 
    CONSTRAINT P_LIST_PK PRIMARY KEY (P_NO)
)
/

--P_NO 시퀀스 생성
CREATE SEQUENCE  P_SEQUENCE
   MINVALUE 1 MAXVALUE 99999999999999999999999
   INCREMENT BY 1
   START WITH 1
   CACHE 20 NOORDER  NOCYCLE ;


COMMENT ON COLUMN P_LIST.P_NO IS '상품 등록번호'
/

COMMENT ON COLUMN P_LIST.SALE_ID IS '판매자 아이디'
/

COMMENT ON COLUMN P_LIST.PURCHASE_ID IS '구매자 아이디'
/

COMMENT ON COLUMN P_LIST.PICTURE01 IS '사진01'
/

COMMENT ON COLUMN P_LIST.PRICE IS '상품가격'
/

COMMENT ON COLUMN P_LIST.P_TITLE IS '상품제목'
/

COMMENT ON COLUMN P_LIST.P_CONTENTS IS '상품내용'
/

COMMENT ON COLUMN P_LIST.P_STATUS IS '판매상태'
/

COMMENT ON COLUMN P_LIST.P_CATEGORY IS '상품종류'
/

COMMENT ON COLUMN P_LIST.P_REGDATE IS '등록일'
/

COMMENT ON COLUMN P_LIST.LOCATION IS '지역'
/

COMMENT ON COLUMN P_LIST.SELLING_DATE IS '판매완료일'
/


-- MEMBER Table Create SQL
CREATE TABLE LOG
(
    ID          VARCHAR2(20)     NOT NULL, 
    PASSWORD    VARCHAR2(100)    NULL, 
    NAME        VARCHAR2(20)     NULL, 
    YEAR        VARCHAR2(4)      NULL, 
    MONTH       VARCHAR2(4)      NULL, 
    DAY         VARCHAR2(4)      NULL, 
    PHONNUM     VARCHAR2(40)     NULL, 
    LOCATION    VARCHAR2(20)     NULL, 
    EMAIL       VARCHAR2(60)     NULL, 
    REGDATE     VARCHAR2(20)     NULL, 
    LOGMODE     VARCHAR2(20)     NULL   
)
/

COMMENT ON COLUMN LOG.ID IS '아이디'
/

COMMENT ON COLUMN LOG.PASSWORD IS '비밀번호'
/

COMMENT ON COLUMN LOG.NAME IS '이름'
/

COMMENT ON COLUMN LOG.YEAR IS '생일 년'
/

COMMENT ON COLUMN LOG.MONTH IS '생일 월'
/

COMMENT ON COLUMN LOG.DAY IS '생일 일'
/

COMMENT ON COLUMN LOG.PHONNUM IS '핸드폰번호'
/

COMMENT ON COLUMN LOG.LOCATION IS '지역'
/

COMMENT ON COLUMN LOG.EMAIL IS '이메일'
/

COMMENT ON COLUMN LOG.REGDATE IS '회원상태별 날짜'
/

COMMENT ON COLUMN LOG.LOGMODE IS '모드'
/


-- MEMBER Table Create SQL
CREATE TABLE REVIEW
(
    P_NO           NUMBER(7,0)      NOT NULL, 
    R_CONTENT      VARCHAR2(100)    NULL, 
    R_REGDATE      VARCHAR2(20)     NULL, 
    PURCHASE_ID    VARCHAR2(20)     NOT NULL, 
    R_STATUS       VARCHAR2(20)     NOT NULL, 
    CONSTRAINT REVIEW_PK PRIMARY KEY (P_NO)
)
/

COMMENT ON COLUMN REVIEW.P_NO IS '상품 등록번호'
/

COMMENT ON COLUMN REVIEW.R_CONTENT IS '리뷰내용'
/

COMMENT ON COLUMN REVIEW.R_REGDATE IS '리뷰 등록날짜'
/

COMMENT ON COLUMN REVIEW.PURCHASE_ID IS '작성자아이디'
/

COMMENT ON COLUMN REVIEW.R_STATUS IS '리뷰상태'
/


-- MEMBER Table Create SQL
CREATE TABLE COMMON
(
    COMMON_CODE    VARCHAR2(10)    NOT NULL, 
    COMMON_NAME    VARCHAR2(30)    NOT NULL
)
/

COMMENT ON COLUMN COMMON.COMMON_CODE IS '분류코드'
/

COMMENT ON COLUMN COMMON.COMMON_NAME IS '분류명'
/

--트리거 작성
create or replace TRIGGER AFTER_MEMBER_IUD
    AFTER INSERT OR UPDATE OR DELETE ON MEMBER
    FOR EACH ROW

BEGIN 
    -- INSERT 이벤트가 발생한 경우 로그 남기기
    IF INSERTING THEN
        INSERT INTO LOG
                                                -- JOB_GUBUN은 인서트작업이 이뤄졌는지를 구분하기 위한 컬럼명
                                                -- LOGDATE 는 DEFAULT 값을 줬기때문에 적지 않는다
            (ID, PASSWORD, NAME, YEAR, MONTH, DAY, PHONNUM, LOCATION, EMAIL, LOGMODE) 
        VALUES (:NEW.ID, :NEW.PASSWORD, :NEW.NAME, :NEW.YEAR, :NEW.MONTH, :NEW.DAY, :NEW.PHONNUM, :NEW.LOCATION, :NEW.EMAIL, '회원가입');
    END IF;
    
    -- UPDATE 이벤트가 발생한 경우 로그 남기기
    IF UPDATING THEN
        INSERT INTO LOG
            (ID, PASSWORD, PHONNUM, LOCATION, EMAIL, LOGMODE)
        VALUES (:OLD.ID
            , :OLD.PASSWORD || ' -> ' || :NEW.PASSWORD
            , :OLD.PHONNUM  || ' -> ' || :NEW.PHONNUM
            , :OLD.LOCATION  || ' -> ' || :NEW.LOCATION
            , :OLD.EMAIL  || ' -> ' || :NEW.EMAIL
            , '회원수정'
            );
    END IF;
    
    IF DELETING THEN
        INSERT INTO LOG
                 (ID, PASSWORD, NAME, YEAR, MONTH, DAY, PHONNUM, LOCATION, EMAIL, LOGMODE)
        VALUES (:OLD.ID, :OLD.PASSWORD, :OLD.NAME, :OLD.YEAR, :OLD.MONTH, :OLD.DAY, :OLD.PHONNUM, :OLD.LOCATION, :OLD.EMAIL, '회원삭제');
    END IF;
END;

--카테고리 데이터 추가
INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('PS01', '판매중');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('PS02', '판매완료');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('BS01', '답변대기중');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('BS02', '답변완료');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('PC01', '의류');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('PC02', '패션잡화');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('PC03', '디지털/가전');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('PC04', '도서');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('PC05', '뷰티/미용');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('PC06', '기타');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('BC01', 'FAQ');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('BC02', '게시판');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('L01', '서울');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('L02', '경기');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('L03', '충청');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('L04', '전라');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('L05', '강원');

INSERT INTO COMMON(COMMON_CODE, COMMON_NAME)
VALUES('L06', '경상');

COMMIT;


